@startuml Executor
title Executor Contract & Dependancy Flow

actor User as U
actor "Bot" as B
participant "Core" as C
box Executor
participant "executeTIDStream" as ETS 
end box
participant "StreamDaemon" as SD
database "DEXs" as DEX

group "Trade Execution"
U -> C: User places trade which is stored in the \nqueue. Funds are held in the contract.\n\nA single stream is executed
  C -> ETS: executeTrade(TradeParams)
  activate ETS
  ETS -> SD: checkSweetSpot(token, amount)
  SD <--> DEX: Validate parameters against\nmarket conditions
  SD -> ETS: Return sweet spot
  ETS -> ETS: Run trade parameter checks
  
  alt Checks Passed
    ETS -> ETS: validateTradeParams(params)
    ETS -> DEX: swapOnDEX(tokenIn, tokenOut, amount)
    DEX -> ETS: Return swap result
    ETS -> ETS: Emit TradeExecuted event
    ETS -> C: Return tradeId and metadata
    C -> C: update trade
  else Checks Failed
    ETS -> C: Emit event and return fail || 0
  end
  deactivate ETS
end

group "Trade SettleMent (Final Stream)"
  B -> C: Bot prods to settle pending trade streams
  C -> ETS: executeTrade(tradeParams)
  activate ETS
  ETS -> ETS: check trade status (is settled)
  ETS -> SD: checkSweetSpot(token, amount)
  SD <--> DEX: Validate parameters against\nmarket conditions
  SD -> ETS: Return sweet spot
  ETS -> ETS: Run trade parameter checks
  
  alt Checks Passed
    ETS -> ETS: validateTradeParams(params)
    ETS -> DEX: swapOnDEX(tokenIn, tokenOut, amount)
    DEX -> ETS: return swap result
    ETS -> ETS: emit TradeSettled event
    ETS -> C: return tradeId and metadata
    C -> C: mark trade as settled
    ETS -> B: transfer bot fees
    ETS -> U: transfer user tokens
  else Checks Failed
    ETS -> C: emit event and return fail || 0
  end
  deactivate ETS
end

@enduml
