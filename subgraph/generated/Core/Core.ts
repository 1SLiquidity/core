// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TradeCancelled extends ethereum.Event {
  get params(): TradeCancelled__Params {
    return new TradeCancelled__Params(this);
  }
}

export class TradeCancelled__Params {
  _event: TradeCancelled;

  constructor(event: TradeCancelled) {
    this._event = event;
  }

  get tradeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountRemaining(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get realisedAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TradeCreated extends ethereum.Event {
  get params(): TradeCreated__Params {
    return new TradeCreated__Params(this);
  }
}

export class TradeCreated__Params {
  _event: TradeCreated;

  constructor(event: TradeCreated) {
    this._event = event;
  }

  get tradeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get amountRemaining(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get minAmountOut(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get realisedAmountOut(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get isInstasettlable(): boolean {
    return this._event.parameters[8].value.toBoolean();
  }

  get instasettleBps(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }

  get botGasAllowance(): BigInt {
    return this._event.parameters[10].value.toBigInt();
  }

  get cumulativeGasEntailed(): BigInt {
    return this._event.parameters[11].value.toBigInt();
  }

  get lastSweetSpot(): BigInt {
    return this._event.parameters[12].value.toBigInt();
  }
}

export class TradeSettled extends ethereum.Event {
  get params(): TradeSettled__Params {
    return new TradeSettled__Params(this);
  }
}

export class TradeSettled__Params {
  _event: TradeSettled;

  constructor(event: TradeSettled) {
    this._event = event;
  }

  get tradeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get settler(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get totalAmountIn(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalAmountOut(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get totalFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class TradeStreamExecuted extends ethereum.Event {
  get params(): TradeStreamExecuted__Params {
    return new TradeStreamExecuted__Params(this);
  }
}

export class TradeStreamExecuted__Params {
  _event: TradeStreamExecuted;

  constructor(event: TradeStreamExecuted) {
    this._event = event;
  }

  get tradeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amountIn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get realisedAmountOut(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get cumulativeGasEntailed(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get lastSweetSpot(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Core___executeStreamResultUpdatedTradeStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get cumulativeGasEntailed(): BigInt {
    return this[1].toBigInt();
  }

  get attempts(): i32 {
    return this[2].toI32();
  }

  get tokenIn(): Address {
    return this[3].toAddress();
  }

  get tokenOut(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get amountRemaining(): BigInt {
    return this[6].toBigInt();
  }

  get targetAmountOut(): BigInt {
    return this[7].toBigInt();
  }

  get realisedAmountOut(): BigInt {
    return this[8].toBigInt();
  }

  get tradeId(): BigInt {
    return this[9].toBigInt();
  }

  get instasettleBps(): BigInt {
    return this[10].toBigInt();
  }

  get botGasAllowance(): BigInt {
    return this[11].toBigInt();
  }

  get lastSweetSpot(): BigInt {
    return this[12].toBigInt();
  }

  get isInstasettlable(): boolean {
    return this[13].toBoolean();
  }
}

export class Core___executeStreamInputTradeStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get cumulativeGasEntailed(): BigInt {
    return this[1].toBigInt();
  }

  get attempts(): i32 {
    return this[2].toI32();
  }

  get tokenIn(): Address {
    return this[3].toAddress();
  }

  get tokenOut(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get amountRemaining(): BigInt {
    return this[6].toBigInt();
  }

  get targetAmountOut(): BigInt {
    return this[7].toBigInt();
  }

  get realisedAmountOut(): BigInt {
    return this[8].toBigInt();
  }

  get tradeId(): BigInt {
    return this[9].toBigInt();
  }

  get instasettleBps(): BigInt {
    return this[10].toBigInt();
  }

  get botGasAllowance(): BigInt {
    return this[11].toBigInt();
  }

  get lastSweetSpot(): BigInt {
    return this[12].toBigInt();
  }

  get isInstasettlable(): boolean {
    return this[13].toBoolean();
  }
}

export class Core__tradesResult {
  value0: Address;
  value1: BigInt;
  value2: i32;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;
  value9: BigInt;
  value10: BigInt;
  value11: BigInt;
  value12: BigInt;
  value13: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: i32,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt,
    value9: BigInt,
    value10: BigInt,
    value11: BigInt,
    value12: BigInt,
    value13: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
    this.value13 = value13;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromUnsignedBigInt(this.value10));
    map.set("value11", ethereum.Value.fromUnsignedBigInt(this.value11));
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    map.set("value13", ethereum.Value.fromBoolean(this.value13));
    return map;
  }

  getOwner(): Address {
    return this.value0;
  }

  getCumulativeGasEntailed(): BigInt {
    return this.value1;
  }

  getAttempts(): i32 {
    return this.value2;
  }

  getTokenIn(): Address {
    return this.value3;
  }

  getTokenOut(): Address {
    return this.value4;
  }

  getAmountIn(): BigInt {
    return this.value5;
  }

  getAmountRemaining(): BigInt {
    return this.value6;
  }

  getTargetAmountOut(): BigInt {
    return this.value7;
  }

  getRealisedAmountOut(): BigInt {
    return this.value8;
  }

  getTradeId(): BigInt {
    return this.value9;
  }

  getInstasettleBps(): BigInt {
    return this.value10;
  }

  getBotGasAllowance(): BigInt {
    return this.value11;
  }

  getLastSweetSpot(): BigInt {
    return this.value12;
  }

  getIsInstasettlable(): boolean {
    return this.value13;
  }
}

export class Core extends ethereum.SmartContract {
  static bind(address: Address): Core {
    return new Core("Core", address);
  }

  TWAP_GAS_COST(param0: BigInt): BigInt {
    let result = super.call(
      "TWAP_GAS_COST",
      "TWAP_GAS_COST(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_TWAP_GAS_COST(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "TWAP_GAS_COST",
      "TWAP_GAS_COST(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _cancelTrade(tradeId: BigInt): boolean {
    let result = super.call("_cancelTrade", "_cancelTrade(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tradeId)
    ]);

    return result[0].toBoolean();
  }

  try__cancelTrade(tradeId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("_cancelTrade", "_cancelTrade(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tradeId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _executeStream(
    trade: Core___executeStreamInputTradeStruct
  ): Core___executeStreamResultUpdatedTradeStruct {
    let result = super.call(
      "_executeStream",
      "_executeStream((address,uint96,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):((address,uint96,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromTuple(trade)]
    );

    return changetype<Core___executeStreamResultUpdatedTradeStruct>(
      result[0].toTuple()
    );
  }

  try__executeStream(
    trade: Core___executeStreamInputTradeStruct
  ): ethereum.CallResult<Core___executeStreamResultUpdatedTradeStruct> {
    let result = super.tryCall(
      "_executeStream",
      "_executeStream((address,uint96,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)):((address,uint96,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromTuple(trade)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Core___executeStreamResultUpdatedTradeStruct>(
        value[0].toTuple()
      )
    );
  }

  eoaTokenBalance(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "eoaTokenBalance",
      "eoaTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_eoaTokenBalance(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "eoaTokenBalance",
      "eoaTokenBalance(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  executor(): Address {
    let result = super.call("executor", "executor():(address)", []);

    return result[0].toAddress();
  }

  try_executor(): ethereum.CallResult<Address> {
    let result = super.tryCall("executor", "executor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPairIdTradeIds(pairId: Bytes): Array<BigInt> {
    let result = super.call(
      "getPairIdTradeIds",
      "getPairIdTradeIds(bytes32):(uint256[])",
      [ethereum.Value.fromFixedBytes(pairId)]
    );

    return result[0].toBigIntArray();
  }

  try_getPairIdTradeIds(pairId: Bytes): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getPairIdTradeIds",
      "getPairIdTradeIds(bytes32):(uint256[])",
      [ethereum.Value.fromFixedBytes(pairId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  lastGasCost(): BigInt {
    let result = super.call("lastGasCost", "lastGasCost():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastGasCost(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastGasCost", "lastGasCost():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastGasPrice(): BigInt {
    let result = super.call("lastGasPrice", "lastGasPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastGasPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastGasPrice", "lastGasPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastGasUsed(): BigInt {
    let result = super.call("lastGasUsed", "lastGasUsed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastGasUsed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastGasUsed", "lastGasUsed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastTradeId(): BigInt {
    let result = super.call("lastTradeId", "lastTradeId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTradeId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lastTradeId", "lastTradeId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  modulusResiduals(param0: Address): BigInt {
    let result = super.call(
      "modulusResiduals",
      "modulusResiduals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_modulusResiduals(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "modulusResiduals",
      "modulusResiduals(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pairIdTradeIds(param0: Bytes, param1: BigInt): BigInt {
    let result = super.call(
      "pairIdTradeIds",
      "pairIdTradeIds(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_pairIdTradeIds(
    param0: Bytes,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pairIdTradeIds",
      "pairIdTradeIds(bytes32,uint256):(uint256)",
      [
        ethereum.Value.fromFixedBytes(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  readTWAPGasCost(delta: BigInt): BigInt {
    let result = super.call(
      "readTWAPGasCost",
      "readTWAPGasCost(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(delta)]
    );

    return result[0].toBigInt();
  }

  try_readTWAPGasCost(delta: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "readTWAPGasCost",
      "readTWAPGasCost(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(delta)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  streamDaemon(): Address {
    let result = super.call("streamDaemon", "streamDaemon():(address)", []);

    return result[0].toAddress();
  }

  try_streamDaemon(): ethereum.CallResult<Address> {
    let result = super.tryCall("streamDaemon", "streamDaemon():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trades(param0: BigInt): Core__tradesResult {
    let result = super.call(
      "trades",
      "trades(uint256):(address,uint96,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Core__tradesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBigInt(),
      result[11].toBigInt(),
      result[12].toBigInt(),
      result[13].toBoolean()
    );
  }

  try_trades(param0: BigInt): ethereum.CallResult<Core__tradesResult> {
    let result = super.tryCall(
      "trades",
      "trades(uint256):(address,uint96,uint8,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Core__tradesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBigInt(),
        value[11].toBigInt(),
        value[12].toBigInt(),
        value[13].toBoolean()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _streamDaemon(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _executor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _registry(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _lastGasUsed(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class _cancelTradeCall extends ethereum.Call {
  get inputs(): _cancelTradeCall__Inputs {
    return new _cancelTradeCall__Inputs(this);
  }

  get outputs(): _cancelTradeCall__Outputs {
    return new _cancelTradeCall__Outputs(this);
  }
}

export class _cancelTradeCall__Inputs {
  _call: _cancelTradeCall;

  constructor(call: _cancelTradeCall) {
    this._call = call;
  }

  get tradeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _cancelTradeCall__Outputs {
  _call: _cancelTradeCall;

  constructor(call: _cancelTradeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _executeStreamCall extends ethereum.Call {
  get inputs(): _executeStreamCall__Inputs {
    return new _executeStreamCall__Inputs(this);
  }

  get outputs(): _executeStreamCall__Outputs {
    return new _executeStreamCall__Outputs(this);
  }
}

export class _executeStreamCall__Inputs {
  _call: _executeStreamCall;

  constructor(call: _executeStreamCall) {
    this._call = call;
  }

  get trade(): _executeStreamCallTradeStruct {
    return changetype<_executeStreamCallTradeStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class _executeStreamCall__Outputs {
  _call: _executeStreamCall;

  constructor(call: _executeStreamCall) {
    this._call = call;
  }

  get updatedTrade(): _executeStreamCallUpdatedTradeStruct {
    return changetype<_executeStreamCallUpdatedTradeStruct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class _executeStreamCallTradeStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get cumulativeGasEntailed(): BigInt {
    return this[1].toBigInt();
  }

  get attempts(): i32 {
    return this[2].toI32();
  }

  get tokenIn(): Address {
    return this[3].toAddress();
  }

  get tokenOut(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get amountRemaining(): BigInt {
    return this[6].toBigInt();
  }

  get targetAmountOut(): BigInt {
    return this[7].toBigInt();
  }

  get realisedAmountOut(): BigInt {
    return this[8].toBigInt();
  }

  get tradeId(): BigInt {
    return this[9].toBigInt();
  }

  get instasettleBps(): BigInt {
    return this[10].toBigInt();
  }

  get botGasAllowance(): BigInt {
    return this[11].toBigInt();
  }

  get lastSweetSpot(): BigInt {
    return this[12].toBigInt();
  }

  get isInstasettlable(): boolean {
    return this[13].toBoolean();
  }
}

export class _executeStreamCallUpdatedTradeStruct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get cumulativeGasEntailed(): BigInt {
    return this[1].toBigInt();
  }

  get attempts(): i32 {
    return this[2].toI32();
  }

  get tokenIn(): Address {
    return this[3].toAddress();
  }

  get tokenOut(): Address {
    return this[4].toAddress();
  }

  get amountIn(): BigInt {
    return this[5].toBigInt();
  }

  get amountRemaining(): BigInt {
    return this[6].toBigInt();
  }

  get targetAmountOut(): BigInt {
    return this[7].toBigInt();
  }

  get realisedAmountOut(): BigInt {
    return this[8].toBigInt();
  }

  get tradeId(): BigInt {
    return this[9].toBigInt();
  }

  get instasettleBps(): BigInt {
    return this[10].toBigInt();
  }

  get botGasAllowance(): BigInt {
    return this[11].toBigInt();
  }

  get lastSweetSpot(): BigInt {
    return this[12].toBigInt();
  }

  get isInstasettlable(): boolean {
    return this[13].toBoolean();
  }
}

export class CloseGasRecordCall extends ethereum.Call {
  get inputs(): CloseGasRecordCall__Inputs {
    return new CloseGasRecordCall__Inputs(this);
  }

  get outputs(): CloseGasRecordCall__Outputs {
    return new CloseGasRecordCall__Outputs(this);
  }
}

export class CloseGasRecordCall__Inputs {
  _call: CloseGasRecordCall;

  constructor(call: CloseGasRecordCall) {
    this._call = call;
  }
}

export class CloseGasRecordCall__Outputs {
  _call: CloseGasRecordCall;

  constructor(call: CloseGasRecordCall) {
    this._call = call;
  }
}

export class ExecuteTradesCall extends ethereum.Call {
  get inputs(): ExecuteTradesCall__Inputs {
    return new ExecuteTradesCall__Inputs(this);
  }

  get outputs(): ExecuteTradesCall__Outputs {
    return new ExecuteTradesCall__Outputs(this);
  }
}

export class ExecuteTradesCall__Inputs {
  _call: ExecuteTradesCall;

  constructor(call: ExecuteTradesCall) {
    this._call = call;
  }

  get pairId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExecuteTradesCall__Outputs {
  _call: ExecuteTradesCall;

  constructor(call: ExecuteTradesCall) {
    this._call = call;
  }
}

export class InitiateGasRecordCall extends ethereum.Call {
  get inputs(): InitiateGasRecordCall__Inputs {
    return new InitiateGasRecordCall__Inputs(this);
  }

  get outputs(): InitiateGasRecordCall__Outputs {
    return new InitiateGasRecordCall__Outputs(this);
  }
}

export class InitiateGasRecordCall__Inputs {
  _call: InitiateGasRecordCall;

  constructor(call: InitiateGasRecordCall) {
    this._call = call;
  }
}

export class InitiateGasRecordCall__Outputs {
  _call: InitiateGasRecordCall;

  constructor(call: InitiateGasRecordCall) {
    this._call = call;
  }
}

export class InstasettleCall extends ethereum.Call {
  get inputs(): InstasettleCall__Inputs {
    return new InstasettleCall__Inputs(this);
  }

  get outputs(): InstasettleCall__Outputs {
    return new InstasettleCall__Outputs(this);
  }
}

export class InstasettleCall__Inputs {
  _call: InstasettleCall;

  constructor(call: InstasettleCall) {
    this._call = call;
  }

  get tradeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class InstasettleCall__Outputs {
  _call: InstasettleCall;

  constructor(call: InstasettleCall) {
    this._call = call;
  }
}

export class PlaceTradeCall extends ethereum.Call {
  get inputs(): PlaceTradeCall__Inputs {
    return new PlaceTradeCall__Inputs(this);
  }

  get outputs(): PlaceTradeCall__Outputs {
    return new PlaceTradeCall__Outputs(this);
  }
}

export class PlaceTradeCall__Inputs {
  _call: PlaceTradeCall;

  constructor(call: PlaceTradeCall) {
    this._call = call;
  }

  get tradeData(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PlaceTradeCall__Outputs {
  _call: PlaceTradeCall;

  constructor(call: PlaceTradeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
