// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DEXRouteAdded extends ethereum.Event {
  get params(): DEXRouteAdded__Params {
    return new DEXRouteAdded__Params(this);
  }
}

export class DEXRouteAdded__Params {
  _event: DEXRouteAdded;

  constructor(event: DEXRouteAdded) {
    this._event = event;
  }

  get dex(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class DEXRouteRemoved extends ethereum.Event {
  get params(): DEXRouteRemoved__Params {
    return new DEXRouteRemoved__Params(this);
  }
}

export class DEXRouteRemoved__Params {
  _event: DEXRouteRemoved;

  constructor(event: DEXRouteRemoved) {
    this._event = event;
  }

  get dex(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class StreamDaemon__evaluateSweetSpotAndDexResult {
  value0: BigInt;
  value1: Address;
  value2: Address;

  constructor(value0: BigInt, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getSweetSpot(): BigInt {
    return this.value0;
  }

  getBestFetcher(): Address {
    return this.value1;
  }

  getRouter(): Address {
    return this.value2;
  }
}

export class StreamDaemon__findHighestReservesForTokenPairResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Address, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getBestFetcher(): Address {
    return this.value0;
  }

  getMaxReserveIn(): BigInt {
    return this.value1;
  }

  getMaxReserveOut(): BigInt {
    return this.value2;
  }
}

export class StreamDaemon extends ethereum.SmartContract {
  static bind(address: Address): StreamDaemon {
    return new StreamDaemon("StreamDaemon", address);
  }

  MIN_EFFECTIVE_GAS_DOLLARS(): BigInt {
    let result = super.call(
      "MIN_EFFECTIVE_GAS_DOLLARS",
      "MIN_EFFECTIVE_GAS_DOLLARS():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_EFFECTIVE_GAS_DOLLARS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_EFFECTIVE_GAS_DOLLARS",
      "MIN_EFFECTIVE_GAS_DOLLARS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _sweetSpotAlgo(
    tokenIn: Address,
    tokenOut: Address,
    volume: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt,
    effectiveGas: BigInt
  ): BigInt {
    let result = super.call(
      "_sweetSpotAlgo",
      "_sweetSpotAlgo(address,address,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut),
        ethereum.Value.fromUnsignedBigInt(effectiveGas)
      ]
    );

    return result[0].toBigInt();
  }

  try__sweetSpotAlgo(
    tokenIn: Address,
    tokenOut: Address,
    volume: BigInt,
    reserveIn: BigInt,
    reserveOut: BigInt,
    effectiveGas: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_sweetSpotAlgo",
      "_sweetSpotAlgo(address,address,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromUnsignedBigInt(reserveIn),
        ethereum.Value.fromUnsignedBigInt(reserveOut),
        ethereum.Value.fromUnsignedBigInt(effectiveGas)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dexToRouters(param0: Address): Address {
    let result = super.call("dexToRouters", "dexToRouters(address):(address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toAddress();
  }

  try_dexToRouters(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "dexToRouters",
      "dexToRouters(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  dexs(param0: BigInt): Address {
    let result = super.call("dexs", "dexs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_dexs(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("dexs", "dexs(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  evaluateSweetSpotAndDex(
    tokenIn: Address,
    tokenOut: Address,
    volume: BigInt,
    effectiveGas: BigInt
  ): StreamDaemon__evaluateSweetSpotAndDexResult {
    let result = super.call(
      "evaluateSweetSpotAndDex",
      "evaluateSweetSpotAndDex(address,address,uint256,uint256):(uint256,address,address)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromUnsignedBigInt(effectiveGas)
      ]
    );

    return new StreamDaemon__evaluateSweetSpotAndDexResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_evaluateSweetSpotAndDex(
    tokenIn: Address,
    tokenOut: Address,
    volume: BigInt,
    effectiveGas: BigInt
  ): ethereum.CallResult<StreamDaemon__evaluateSweetSpotAndDexResult> {
    let result = super.tryCall(
      "evaluateSweetSpotAndDex",
      "evaluateSweetSpotAndDex(address,address,uint256,uint256):(uint256,address,address)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(volume),
        ethereum.Value.fromUnsignedBigInt(effectiveGas)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StreamDaemon__evaluateSweetSpotAndDexResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  findHighestReservesForTokenPair(
    tokenIn: Address,
    tokenOut: Address
  ): StreamDaemon__findHighestReservesForTokenPairResult {
    let result = super.call(
      "findHighestReservesForTokenPair",
      "findHighestReservesForTokenPair(address,address):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );

    return new StreamDaemon__findHighestReservesForTokenPairResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_findHighestReservesForTokenPair(
    tokenIn: Address,
    tokenOut: Address
  ): ethereum.CallResult<StreamDaemon__findHighestReservesForTokenPairResult> {
    let result = super.tryCall(
      "findHighestReservesForTokenPair",
      "findHighestReservesForTokenPair(address,address):(address,uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StreamDaemon__findHighestReservesForTokenPairResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  universalDexInterface(): Address {
    let result = super.call(
      "universalDexInterface",
      "universalDexInterface():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_universalDexInterface(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "universalDexInterface",
      "universalDexInterface():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _dexs(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get _routers(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RegisterDexCall extends ethereum.Call {
  get inputs(): RegisterDexCall__Inputs {
    return new RegisterDexCall__Inputs(this);
  }

  get outputs(): RegisterDexCall__Outputs {
    return new RegisterDexCall__Outputs(this);
  }
}

export class RegisterDexCall__Inputs {
  _call: RegisterDexCall;

  constructor(call: RegisterDexCall) {
    this._call = call;
  }

  get _fetcher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterDexCall__Outputs {
  _call: RegisterDexCall;

  constructor(call: RegisterDexCall) {
    this._call = call;
  }
}

export class RemoveDexCall extends ethereum.Call {
  get inputs(): RemoveDexCall__Inputs {
    return new RemoveDexCall__Inputs(this);
  }

  get outputs(): RemoveDexCall__Outputs {
    return new RemoveDexCall__Outputs(this);
  }
}

export class RemoveDexCall__Inputs {
  _call: RemoveDexCall;

  constructor(call: RemoveDexCall) {
    this._call = call;
  }

  get _fetcher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveDexCall__Outputs {
  _call: RemoveDexCall;

  constructor(call: RemoveDexCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
