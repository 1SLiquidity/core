type Trade @entity {
  id: ID!
  tradeId: BigInt!
  user: Bytes!
  tokenIn: Bytes!
  tokenOut: Bytes!
  amountIn: BigInt!
  amountRemaining: BigInt!
  minAmountOut: BigInt!
  realisedAmountOut: BigInt!
  isInstasettlable: Boolean!
  instasettleBps: BigInt!
  lastSweetSpot: BigInt!
  usePriceBased: Boolean!
  createdAt: BigInt!
  executions: [TradeExecution!]! @derivedFrom(field: "trade")
  cancellations: [TradeCancellation!]! @derivedFrom(field: "trade")
  settlements: [TradeSettlement!]! @derivedFrom(field: "trade")
  streamFees: [StreamFee!]! @derivedFrom(field: "trade")
  instasettleFees: [InstasettleFee!]! @derivedFrom(field: "trade")
}

type TradeExecution @entity {
  id: ID!
  trade: Trade!
  amountIn: BigInt!
  realisedAmountOut: BigInt!
  lastSweetSpot: BigInt!
  timestamp: BigInt!
}

type TradeCancellation @entity {
  id: ID!
  trade: Trade!
  amountRemaining: BigInt!
  realisedAmountOut: BigInt!
  timestamp: BigInt!
}

type TradeSettlement @entity {
  id: ID!
  trade: Trade!
  settler: Bytes!
  totalAmountIn: BigInt!
  totalAmountOut: BigInt!
  totalFees: BigInt!
  timestamp: BigInt!
}

# InstaSettleConfig entity removed - InstaSettleConfigured event no longer exists

type StreamFee @entity {
  id: ID!
  trade: Trade!
  bot: Bytes!
  token: Bytes!
  protocolFee: BigInt!
  botFee: BigInt!
  timestamp: BigInt!
}

type InstasettleFee @entity {
  id: ID!
  trade: Trade!
  settler: Bytes!
  token: Bytes!
  protocolFee: BigInt!
  timestamp: BigInt!
}

type DEXRoute @entity {
  id: ID!
  dex: Bytes!
  isActive: Boolean!
  addedAt: BigInt!
  removedAt: BigInt
}

type FeeClaim @entity {
  id: ID!
  recipient: Bytes!
  token: Bytes!
  amount: BigInt!
  isProtocol: Boolean!
  timestamp: BigInt!
}

type FeeRateUpdate @entity {
  id: ID!
  streamProtocolFeeBps: Int!
  streamBotFeeBps: Int!
  instasettleProtocolFeeBps: Int!
  timestamp: BigInt!
}

type LowLevelError @entity {
  id: ID!
  error: String!
  timestamp: BigInt!
}

type DataError @entity {
  id: ID!
  error: Bytes!
  timestamp: BigInt!
} 