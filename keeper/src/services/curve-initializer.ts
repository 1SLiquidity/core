import { ethers } from 'ethers';
import { PriceAggregator } from './price-aggregator';
import { ReservesAggregator } from './reserves-aggregator';

// This will be generated by the fetch-curve-pools script
// For now, we'll use a placeholder that can be replaced
let CURVE_POOL_METADATA: Record<string, any> = {};

/**
 * Initialize Curve pool filtering for both aggregators
 * Call this after loading CURVE_POOL_METADATA from the generated config
 */
export function initializeCurveFiltering(
  priceAggregator: PriceAggregator,
  reservesAggregator: ReservesAggregator,
  poolMetadata: Record<string, any>
) {
  CURVE_POOL_METADATA = poolMetadata;
  
  priceAggregator.initializeCurvePoolFilter(poolMetadata);
  reservesAggregator.initializeCurvePoolFilter(poolMetadata);
  
  console.log(`âœ… Initialized Curve pool filtering with ${Object.keys(poolMetadata).length} pools`);
}

/**
 * Get the current pool metadata
 */
export function getCurvePoolMetadata(): Record<string, any> {
  return CURVE_POOL_METADATA;
}

/**
 * Check if Curve filtering is initialized
 */
export function isCurveFilteringInitialized(): boolean {
  return Object.keys(CURVE_POOL_METADATA).length > 0;
}
