service: one-sliquidity-keeper

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  timeout: 90
  memorySize: 1024
  httpApi:
    cors: true
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    NODE_ENV: ${self:provider.stage}
    RPC_URL: ${env:RPC_URL, 'fallback-rpc-url'}
    CHAIN_ID: ${env:CHAIN_ID, 1}
    REDIS_HOST: ${env:REDIS_HOST, 'localhost'}
    REDIS_PORT: ${env:REDIS_PORT, 6379}
    REDIS_PASSWORD: ${env:REDIS_PASSWORD, ''}
    REDIS_URL: ${env:REDIS_URL, ''}
    BALANCER_SUBGRAPH: ${env:BALANCER_SUBGRAPH, 'https://gateway.thegraph.com/api/subgraphs/id/C4ayEZP2yTXRAB8vSaTrgN4m9anTe9Mdm2ViyiAuV9TV'}
    GRAPH_API_KEY: ${env:GRAPH_API_KEY, ''}

# Remove the package section since webpack will handle bundling
functions:
  reserves:
    handler: src/functions/reserves/handler.main
    timeout: 90
    memorySize: 1024
    events:
      - http:
          path: reserves
          method: get
          cors: true
      - http:
          path: reserves
          method: post
          cors: true
      - http:
          path: reserves
          method: options
          cors: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    packager: 'npm'
    excludeFiles:
      - 'src/**/*.test.js'
      - 'src/**/*.test.ts'
      - 'src/**/*.spec.js'
      - 'src/**/*.spec.ts'
    keepOutputDirectory: false
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3002
    noTimeout: true
  dotenv:
    path: .env
    include:
      - RPC_URL
      - CHAIN_ID
      - REDIS_HOST
      - REDIS_PORT
      - REDIS_PASSWORD
      - REDIS_URL
      - BALANCER_SUBGRAPH
      - GRAPH_API_KEY
